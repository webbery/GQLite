name: CMake

on:
  push:
    branches: [ master, ci, ci-*, develop ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  pre-install:
    runs-on: ubuntu-20.04
    steps:
    - name: install-flex
      run: |
        sudo apt-get install -y flex bison
        
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # os: [windows-latest, ubuntu-latest]
        os: [ubuntu-20.04, macos-latest, windows-latest]

    steps:
    - name: checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: third_party
      run: |
        cd ${{github.workspace}}/third_party/libmdbx
        git fetch --tags --prune --force
        git branch
        cd ${{github.workspace}}/third_party/fmt
        git fetch --tags --prune --force
        git branch
        cd ${{github.workspace}}/third_party/eigen
        git fetch --tags --prune --force
        git branch
        cd ${{github.workspace}}
        git submodule foreach 'git fetch --tags --prune --force; git fetch origin; git checkout $(git describe --tags `git rev-list --tags --max-count=1`);'
    - name: update flex/bison
      if: matrix.os == 'macos-latest'
      run: |
        brew install bison
        echo "$(brew --prefix bison)/bin" >> $GITHUB_PATH
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        pip install gcovr
        cd ${{github.workspace}}
        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DGQLITE_BUILD_TEST=TRUE -DMDBX_BUILD_TOOLS=FALSE -DMDBX_INSTALL_MANPAGES=FALSE -DZSTD_LEGACY_SUPPORT=OFF
    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
        ctest -C Debug --rerun-failed --output-on-failure
    - name: Generate Coverage Report
      working-directory: ${{github.workspace}}/build
      if: matrix.os == 'ubuntu-20.04'
      run: |
        make coverage
    - name: Upload Report to Codecov
      uses: codecov/codecov-action@v1.3.2
      if: matrix.os == 'ubuntu-20.04'
      with:
        files: ${{github.workspace}}/build/coverage.xml
        fail_ci_if_error: true